#!/bin/bash

# defaults
#########################
_source=`pwd`
_destination="/src"
_image="jmervine/vimrc"
_rm="true"

function parg {
  local sopt="$1"
  local lopt="$2"
  local desc="$3"

  [[ -z "$desc" ]] \
    && desc="see 'docker run --help' for details"

  if [ -z "$sopt" ]; then
    printf '      --%-14s %s\n' "$lopt" "$desc"
  else
    printf '  -%s, --%-14s %s\n' "$sopt" "$lopt" "$desc"
  fi
}

function options_printer {
  parg "s" "source"        "local host source directory"
  parg "d" "destination"   "remote host source directory"
  parg "i" "image"         "image"
  parg "H" "hostname"
  parg "p" "port"
  parg "w" "workdir"
  parg "w" "workdir"
  parg "n" "name"
  parg "N" "net"
  parg "r" "rm"
  parg ""  "cpuset"
  parg ""  "memory"
  parg "v" "volumes"
  parg ""  "volumes-from"
  parg "D" "dryrun"        "only print what would be executed"
}

function show_help {
  echo "Usage: $0 [options] [-- command]

Simple wraper for quickly spooling up docker comtainers a development
environments.

  Templates:
  - vim     jmervine/vimrc:latest
  - node    node:latest
  - ruby    ruby:latest
  - rails   rails:latest
  - python  python:2
  - golang  golang:latest

  Options:
$(options_printer)

  Defaults:
  - source       '${_source}'
  - destination  '${_destination}'
  - image        '${_image}'
  - rm           '${_rm}'
  - workdir      destination directory
"
}

function messing_arg_error {
  local arg=$1
  printf 'ERROR: Missing value for %s\n-----\n' "$arg"
  show_help
  exit
}

function save_config {
  echo "# file: .dockmerc" > .dockmerc

  [[ -z "${_source}" ]] \
    || echo "_source=${_source}" >> .dockmerc

  [[ -z "${_destination}" ]] \
    || echo "_destination=${_destination}" >> .dockmerc

  [[ -z "${_image}" ]] \
    || echo "_image=${_image}" >> .dockmerc

  [[ -z "${_rm}" ]] \
    || echo "_rm=${_rm}" >> .dockmerc

  [[ -z "${_workdir}" ]] \
    || echo "_workdir=${_workdir}" >> .dockmerc

  [[ -z "${_port}" ]] \
    || echo "_port=${_port}" >> .dockmerc

  [[ -z "${_hostname}" ]] \
    || echo "_hostname=${_hostname}" >> .dockmerc

  [[ -z "${_name}" ]] \
    || echo "_name=${_name}" >> .dockmerc

  [[ -z "${_net}" ]] \
    || echo "_net=${_net}" >> .dockmerc

  [[ -z "${_cpuset}" ]] \
    || echo "_cpuset=${_cpuset}" >> .dockmerc

  [[ -z "${_memory}" ]] \
    || echo "_memory=${_memory}" >> .dockmerc

  [[ -z "${_volumes}" ]] \
    || echo "_volumes=\"${_volumes}\"" >> .dockmerc

  [[ -z "${_volumes_from}" ]] \
    || echo "_volumes_from=\"${_volumes_from}\"" >> .dockmerc

  [[ -z "${_command}" ]] \
    || echo "_command=${_command}" >> .dockmerc

  echo "+ configuration saved to .dockmerc"
  cat .dockmerc
}

# handle templates
if [ "$#" -eq 1 ]; then
  _found='true'
  case "$@" in
    vim|vimrc)
      _image="jmervine/vimrc:latest";;
    ruby|rb)
      _image="ruby:latest";;
    rails)
      _image="rails:latest";;
    python|py)
      _image="python:2";;
    node|nodejs)
      _image="node:latest";;
    go|golang)
      _image="golang:latest";;
    *)
      unset _found;;
  esac
fi

while [ "$#" -gt 0 ]; do
  case $1 in
    -h|-\?|--help)
      show_help
      exit
      ;;

    # source
    -s|--source)
      if [ "$#" -gt 1 ]; then
        _source=$2
        shift 2
        continue
      else
        missing_arg_error "source"
      fi
      ;;
    --source=?*)
      _source=${1#*=};;
    --source=)
      missing_arg_error "source";;

    # destination
    -d|--destination)
      if [ "$#" -gt 1 ]; then
        _destination=$2
        shift 2
        continue
      else
        missing_arg_error "destination"
      fi
      ;;
    --destination=?*)
      _destination=${1#*=};;
    --destination=)
        missing_arg_error "destination";;

    # image
    -i|--image)
      if [ "$#" -gt 1 ]; then
        _image=$2
        shift 2
        continue
      else
        missing_arg_error "image"
      fi
      ;;
    --image=?*)
      _image=${1#*=};;
    --image=)
        missing_arg_error "image";;

    # hostname
    -H|--hostname)
      if [ "$#" -gt 1 ]; then
        _hostname=$2
        shift 2
        continue
      else
        missing_arg_error "hostname"
      fi
      ;;
    --hostname=?*)
      _hostname=${1#*=};;
    --hostname=)
        missing_arg_error "hostname";;

    # port
    -p|--port)
      if [ "$#" -gt 1 ]; then
        _port=$2
        shift 2
        continue
      else
        missing_arg_error "port"
      fi
      ;;
    --port=?*)
      _port=${1#*=};;
    --port=)
        missing_arg_error "port";;

    # workdir
    -w|--workdir)
      if [ "$#" -gt 1 ]; then
        _workdir=$2
        shift 2
        continue
      else
        missing_arg_error "workdir"
      fi
      ;;
    --workdir=?*)
      _workdir=${1#*=};;
    --workdir=)
        missing_arg_error "workdir";;

    # name
    -n|--name)
      if [ "$#" -gt 1 ]; then
        _name=$2
        shift 2
        continue
      else
        missing_arg_error "name"
      fi
      ;;
    --name=?*)
      _name=${1#*=};;
    --name=)
        missing_arg_error "name";;

    # net
    -N|--net)
      if [ "$#" -gt 1 ]; then
        _net=$2
        shift 2
        continue
      else
        missing_arg_error "net"
      fi
      ;;
    --net=?*)
      _net=${1#*=};;
    --net=)
        missing_arg_error "net";;

    # rm
    -r|--rm)
        _rm='true'
        shift
        break;;

    -?*)
      printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
      shift;;

    *)
      shift;;
  esac
done

if [ "$#" -gt 0 ]; then
  _command=$@
fi

docker="docker run -it"

if [ -z "${_workdir}" ]; then
  docker="${docker} --workdir=${_destination}"
else
  docker="${docker} --workdir=${_workdir}"
fi

[[ "${_rm}" = "true" ]] \
  && docker="${docker} --rm"

[[ -z "${_name}" ]] \
  || docker="${docker} --name=${_name}"

[[ -z "${_net}" ]] \
  || docker="${docker} --net=${_net}"

[[ -z "${_cpuset}" ]] \
  || docker="${docker} --cpuset=${_cpuset}"

[[ -z "${_memory}" ]] \
  || docker="${docker} --memory=${_memory}"

[[ -z "${_destination}" ]] \
  && docker="${docker} --volume=${_source}"

[[ -z "${_destination}" ]] \
  || docker="${docker} --volume=${_source}:${_destination}"

if [[ ! -z "${_volumes}" ]]; then
  for v in $(echo ${_volumes}); do
    vols="${vols} --volume=${v}"
  done
  docker="${docker} ${vols}"
fi

if [[ ! -z "${_volumes_from}" ]]; then
  for v in $(echo ${_volumes_from}); do
    vols="${vols} --volumes-from=${v}"
  done
  docker="${docker} ${vols}"
fi

docker="${docker} ${_image}"

[[ -z "${_command}" ]] \
  || docker="${docker} ${_command}"

echo "+ $docker"

([[ -z "${_dryrun}" ]] \
  && exec $docker) || true

# vim: ft=sh
